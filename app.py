import flask
import xgboost as xgb
import pandas as pd
import numpy as np
import json
import os

# Define the directory where visualizations are stored
VISUALIZATION_DIR = os.path.dirname(os.path.abspath(__file__))
MODEL_FILE = os.path.join(VISUALIZATION_DIR, "xgboost_model.json")

# Load the trained XGBoost model
if not os.path.exists(MODEL_FILE):
    raise FileNotFoundError(f"Model file not found at {MODEL_FILE}. Please run the training script first.")
model = xgb.Booster()
model.load_model(MODEL_FILE)

# Define the expected features based on the training script
expected_features = ["r1h", "r1h_avg", "r3h", "r3h_avg", "rfq", "r1q"]

# Initialize the Flask application
app = flask.Flask(__name__)

@app.route("/", methods=["GET"])
def hello():
    """Basic endpoint to check if the API is running."""
    return "XGBoost Model API is running! Use /predict for predictions and /visualizations for XAI outputs."

@app.route("/predict", methods=["POST"])
def predict():
    """Endpoint to make predictions using the loaded XGBoost model."""
    response = {"success": False}

    if flask.request.is_json:
        try:
            data = flask.request.get_json()
            
            # Check if data is a list of records or a single record
            if isinstance(data, dict):
                # Single record prediction
                input_df = pd.DataFrame([data])
            elif isinstance(data, list):
                # Batch prediction
                input_df = pd.DataFrame(data)
            else:
                raise ValueError("Input data must be a JSON object or a list of JSON objects.")

            # Ensure all expected features are present
            if not all(feature in input_df.columns for feature in expected_features):
                missing = [f for f in expected_features if f not in input_df.columns]
                response["error"] = f"Missing features: {missing}"
                return flask.jsonify(response), 400

            # Reorder columns to match model's training order and convert to DMatrix
            input_features = input_df[expected_features].astype(np.float32)
            dmatrix = xgb.DMatrix(input_features)

            # Make predictions
            predictions = model.predict(dmatrix)

            # Prepare response
            response["predictions"] = predictions.tolist()
            response["success"] = True

        except Exception as e:
            response["error"] = str(e)
            return flask.jsonify(response), 500
    else:
        response["error"] = "Request must be JSON"
        return flask.jsonify(response), 400

    return flask.jsonify(response)

@app.route("/visualizations", methods=["GET"])
def list_visualizations():
    """Lists available visualization files (SHAP PNG, LIME HTML)."""
    try:
        files = [f for f in os.listdir(VISUALIZATION_DIR) if f.startswith(("shap_", "lime_")) and (f.endswith(".png") or f.endswith(".html"))]
        # Specifically look for the XGBoost files generated by the script
        xgboost_files = [f for f in files if "XGBoost" in f]
        if not xgboost_files:
             return flask.jsonify({"message": "No XGBoost visualization files found. Ensure the training script generated them.", "available_files": files}), 404
        return flask.jsonify({"available_xgboost_visualizations": xgboost_files})
    except Exception as e:
        return flask.jsonify({"success": False, "error": str(e)}), 500

@app.route("/visualizations/<filename>", methods=["GET"])
def serve_visualization(filename):
    """Serves a specific visualization file."""
    # Basic security check
    if not (filename.startswith(("shap_", "lime_")) and (filename.endswith(".png") or filename.endswith(".html"))):
        return flask.jsonify({"success": False, "error": "Invalid filename format or type."}), 400
    
    # Check if it's one of the expected XGBoost files for added safety
    expected_files = ["shap_XGBoost.png", "lime_XGBoost.html"]
    if filename not in expected_files:
         return flask.jsonify({"success": False, "error": f"Requested file '{filename}' is not an expected XGBoost visualization."}), 404

    try:
        return flask.send_from_directory(VISUALIZATION_DIR, filename)
    except FileNotFoundError:
        return flask.jsonify({"success": False, "error": "File not found."}), 404
    except Exception as e:
        return flask.jsonify({"success": False, "error": str(e)}), 500

if __name__ == "__main__":
    # IMPORTANT: Bind to 0.0.0.0 to make it accessible externally
    print(f"Looking for model file at: {MODEL_FILE}")
    print(f"Serving visualizations from: {VISUALIZATION_DIR}")
    print("Starting Flask server on port 5000...")
    # Use waitress or gunicorn in a real production scenario instead of Flask's built-in server
    app.run(host="0.0.0.0", port=5000, debug=False)

